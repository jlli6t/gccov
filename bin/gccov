#!/usr/bin/env python3

__author__ = 'Jie Li'
__copyright__ = 'Copyright 2019-2020'
__credits__ = ['Jie Li']
__email__ = 'jie.li6@uq.net.au'
__status__ = 'Development'

import os
import sys
import argparse

import pandas as pd
	

sys.path = [os.path.join((os.path.dirname(os.path.realpath(__file__))), '..')] + sys.path

from gccov.seqs_utils import gc
from gccov.system_utils import make_full_path,check_file_exists
from gccov.scatter import scatter
from gccov.coverm import coverm

def read_pars(args):

	p = argparse.ArgumentParser(description=__doc__)
	required_argument = p.add_argument_group('Required arguments')
	
	required_argument.add_argument('--contigs', dest='contigs', required=True, 
								help='contigs/scaffolds for GC content')

	mutual_required_argument = p.add_argument_group('Mutually exclusive required argument')
	mutual_rgs = mutual_required_argument.add_mutually_exclusive_group(required=True)
	mutual_rgs.add_argument('--coverage', dest='coverage',
							help='coverage file, with column name Coverage')
	mutual_rgs.add_argument('--bam-file', dest='bam-file',
							help='sorted bam file')
	optional_arguments = p.add_argument_group('Optional arguments')

	optional_arguments.add_argument('-scale', dest='scale', default=False, action='store_true',
				help='set to scale scatter dots with your scaffolds/contigs length')
	optional_arguments.add_argument('-prefix', dest='prefix', default='gc_coverage',
				help='prefix of outputs, [gc_coverage]')
	optional_arguments.add_argument('-contig_len', dest='contig_len', default=2500, type=float,
				help='contig length cutoff for GC content and plot, [2500]')
	optional_arguments.add_argument('-cov_width', dest='cov_width', default='0', type=str,
				help='cov range you want to plot, for example 0-100, single 0 means all, [0]')
	optional_arguments.add_argument('-bins_dir', dest='bins_dir', default=None,
				help='bins dir to color genomes you provide')
	optional_arguments.add_argument('-suffix', dest='suffix', default='fa',
				help='suffix of bins if you profile -bins_dir, [fa]')
	optional_arguments.add_argument('-o', dest='outdir', default=os.getcwd(),
				help='output dir')
	return vars(p.parse_args())

if __name__ == '__main__':
	pars = read_pars(sys.argv)
#	if pars['bins_dir']:check_path_exists(pars['bins_dir'])
	outdir = make_full_path(pars['outdir'])
	final_gc = gc(pars['contigs'], pars['contig_len'])
	gc_table = final_gc.count_fasta_gc()
	
	#print(gc_table)

	gc_table.to_csv(outdir + pars['prefix'] + '_gc_content.txt', sep='\t')
	
	if pars['bam-file']:
		cov = os.path.join(outdir, pars['prefix']+'.coverage')
		coverm_pile = coverm(pars['bam-file'], cov)
		coverm_pile.run()
	else:
		cov = pars['coverage']
	check_file_exists(cov)

	cov = pd.read_csv(cov, sep="\t", header=0, index_col=0)
	cov.columns = ['Coverage']

	# get contigs have both gc and coverage
	new = cov.merge(gc_table, how='inner', left_index=True, right_index=True)
	new.to_csv(outdir + pars['prefix'] +'_gc_and_coverage.csv', sep='\t')

	if '-' in pars['cov_width']:
		cov_width = [float(i) for i in pars['cov_width'].split('-')]
		new = new[(new.Coverage >= cov_width[0]) & (new.Coverage <= cov_width[1])]
		
	scatter_plot = scatter(new, outdir+pars['prefix']+'.pdf', \
						pars['bins_dir'], pars['suffix'], pars['scale'])
	scatter_plot.plot()



